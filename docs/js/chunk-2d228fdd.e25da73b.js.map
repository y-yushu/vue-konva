{"version":3,"sources":["webpack:///./src/views/SelectAndTransform/Select-and-Transform.vue","webpack:///src/views/SelectAndTransform/Select-and-Transform.vue","webpack:///./src/views/SelectAndTransform/Select-and-Transform.vue?c87b","webpack:///./src/views/SelectAndTransform/Select-and-Transform.vue?df0b"],"names":["render","_vm","this","_c","_self","staticClass","_m","ref","attrs","on","selectsAll","_v","staticRenderFns","name","mixins","data","starStyle","fill","numPoints","innerRadius","outerRadius","draggable","shadowOffsetX","shadowOffsetY","starPosition","x1","x2","y1","y2","isFirst","created","setTimeout","methods","addElem","x","y","arrData","layer","visible","tr","mousedownTouchstart","stage","selectionRectangle","mousemoveTouchmove","width","height","mouseupTouchend","Konva","clickTap","nodes","component"],"mappings":"uHAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,iBAAiB,CAACJ,EAAIK,GAAG,GAAGH,EAAG,MAAM,CAACI,IAAI,YAAYF,YAAY,YAAYG,MAAM,CAAC,GAAK,eAAeL,EAAG,SAAS,CAACA,EAAG,SAAS,CAACA,EAAG,YAAY,CAACK,MAAM,CAAC,KAAO,WAAWC,GAAG,CAAC,MAAQR,EAAIS,aAAa,CAACT,EAAIU,GAAG,aAAa,IAAI,IAAI,IAE3TC,EAAkB,CAAC,WAAY,IAAIX,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACA,EAAG,KAAK,CAACF,EAAIU,GAAG,kC,iCCclF,GACfE,0BACAC,gBACAC,OACA,OACAC,WAGAC,YACAC,YACAC,eACAC,eACAC,aAEAC,gBACAC,iBAGAC,cACAC,MACAC,MACAC,MACAC,OAGAC,aAGAC,UAEAC,gBACA,gBACA,KAEAC,SAIAC,UACA,uBACA,0BACA,KACA,sBACA,sDACAC,0BACAC,2BACAtB,kBAEAuB,UACAC,SAEA,6BACAxB,YAEAwB,SACA,mBACAA,SAGA,oBACApB,yBACAqB,aAEAD,SAGA,gCAEA,+BAEA,8BAEA,wBAKA3B,cACA,gCACA,KACA,SACA2B,wBACA,4CACA,4BAEAE,WACAF,eAQAG,2BACAC,gCACA,gBACA,OAEA,iCACA,2BACA,2BACA,2BACA,mBACAhB,KAAAC,KAAAC,KAAAC,MAGAc,cACAA,WACAA,YACAL,YASAM,0BACAF,gCACA,gBACA,OAEA,SAAAhB,KAAAE,GAAA,kBACA,2BACA,2BACAe,YACAR,gBACAC,gBACAS,oBACAC,uBAEAR,iBAUAS,yBACAL,6BACA,gBACA,OAGAV,gBACAW,cACAL,gBAIA,WACAA,wBACA,8CAEA,0BACA,cACAU,gDAEAR,WACAF,iBAUAW,kBACAP,qBAGA,eACA,OAIA,gBAGA,OAFAF,iBACAF,SAKA,4CACA,OAIA,qDACA,iCAEA,SAMA,SAKA,0BAGAY,gCACAV,gBACA,UAGA,qCACAA,iBAfAA,oBAiBAF,cC5O6W,I,YCOzWa,EAAY,eACd,EACAlD,EACAY,GACA,EACA,KACA,KACA,MAIa,aAAAsC,E","file":"js/chunk-2d228fdd.e25da73b.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"app-container\"},[_vm._m(0),_c('div',{ref:\"container\",staticClass:\"container\",attrs:{\"id\":\"container\"}}),_c('el-row',[_c('el-col',[_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.selectsAll}},[_vm._v(\"选中所有形状\")])],1)],1)],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',[_c('h1',[_vm._v(\"基础展示（Shift增加一个;Ctrl减少一个）\")])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"app-container\">\r\n    <div><h1>基础展示（Shift增加一个;Ctrl减少一个）</h1></div>\r\n    <div id=\"container\" ref=\"container\" class=\"container\" />\r\n    <el-row>\r\n      <el-col>\r\n        <el-button type=\"primary\" @click=\"selectsAll\">选中所有形状</el-button>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { konva } from '@/mixins'\r\nimport Konva from 'konva'\r\n\r\nexport default {\r\n  name: 'SelectAndTransform',\r\n  mixins: [konva],\r\n  data() {\r\n    return {\r\n      starStyle: {\r\n        // x: stage.width() * Math.random(),\r\n        // y: stage.height() * Math.random(),\r\n        fill: 'blue',\r\n        numPoints: 3,\r\n        innerRadius: 20,\r\n        outerRadius: 25,\r\n        draggable: true,\r\n        // name: 'star ' + i,\r\n        shadowOffsetX: 5,\r\n        shadowOffsetY: 5\r\n      },\r\n      // 开似乎位置\r\n      starPosition: {\r\n        x1: '',\r\n        x2: '',\r\n        y1: '',\r\n        y2: ''\r\n      },\r\n      // 首次点击\r\n      isFirst: true\r\n    }\r\n  },\r\n  created() {\r\n    // 因为第一个图层是10ms后创建的,避免图层未创建问题\r\n    setTimeout(() => {\r\n      this.addElem()\r\n    }, 20)\r\n  },\r\n  methods: {\r\n    /**\r\n     * 按钮--创建图形 yyshu 20201101\r\n     */\r\n    addElem() {\r\n      const stage = this.pageStage\r\n      const layer = this.pageLayer[0].layer\r\n      const arrData = []\r\n      for (let i = 0; i < 10; i++) {\r\n        const data = new Konva.Star(Object.assign({}, this.starStyle, {\r\n          x: stage.width() * Math.random(),\r\n          y: stage.height() * Math.random(),\r\n          name: `star_${i}`\r\n        }))\r\n        arrData.push(data)\r\n        layer.add(data)\r\n      }\r\n      const tr = new Konva.Transformer({\r\n        name: 'tr'\r\n      })\r\n      layer.add(tr)\r\n      this.selectsAll(stage)\r\n      layer.draw()\r\n\r\n      // 开始事件\r\n      var selectionRectangle = new Konva.Rect({\r\n        fill: 'rgba(0,0,255,0.5)',\r\n        visible: false // 默认不显示\r\n      })\r\n      layer.add(selectionRectangle)\r\n\r\n      // 鼠标按下或屏幕触摸\r\n      this.mousedownTouchstart(stage, selectionRectangle, layer)\r\n      // 鼠标移动或屏幕触摸移动\r\n      this.mousemoveTouchmove(stage, selectionRectangle, layer)\r\n      // 鼠标放开或屏幕触摸结束\r\n      this.mouseupTouchend(stage, layer, selectionRectangle, tr)\r\n      // 鼠标点击\r\n      this.clickTap(stage, layer, selectionRectangle, tr)\r\n    },\r\n    /**\r\n     * 按钮--选中所有\r\n     */\r\n    selectsAll(stage) {\r\n      const layer = this.pageLayer[0].layer\r\n      const arr = []\r\n      let tr = ''\r\n      layer.children.forEach(item => {\r\n        if (item.getName().indexOf('star_') !== -1) arr.push(item) // 选中所有星形\r\n        if (item.getName() === 'tr') tr = item // 找到选择器\r\n      })\r\n      tr.nodes(arr)\r\n      layer.batchDraw()\r\n    },\r\n    /**\r\n     * 监听--鼠标按下或屏幕触摸\r\n     * @param stage\r\n     * @param layer\r\n     * @param selectionRectangle\r\n     */\r\n    mousedownTouchstart(stage, selectionRectangle, layer) {\r\n      stage.on('mousedown touchstart', (e) => {\r\n        if (e.target !== stage) {\r\n          return\r\n        }\r\n        const x1 = stage.getPointerPosition().x\r\n        const y1 = stage.getPointerPosition().y\r\n        const x2 = stage.getPointerPosition().x\r\n        const y2 = stage.getPointerPosition().y\r\n        this.starPosition = {\r\n          x1, x2, y1, y2\r\n        }\r\n\r\n        selectionRectangle.visible(true)\r\n        selectionRectangle.width(0)\r\n        selectionRectangle.height(0)\r\n        layer.draw()\r\n      })\r\n    },\r\n    /**\r\n     * 监听--鼠标移动或屏幕触摸移动\r\n     * @param stage\r\n     * @param layer\r\n     * @param selectionRectangle\r\n     */\r\n    mousemoveTouchmove(stage, selectionRectangle, layer) {\r\n      stage.on('mousemove touchmove', () => {\r\n        if (!selectionRectangle.visible()) {\r\n          return\r\n        }\r\n        const { x1, y1 } = this.starPosition\r\n        const x2 = stage.getPointerPosition().x\r\n        const y2 = stage.getPointerPosition().y\r\n        selectionRectangle.setAttrs({\r\n          x: Math.min(x1, x2),\r\n          y: Math.min(y1, y2),\r\n          width: Math.abs(x2 - x1),\r\n          height: Math.abs(y2 - y1)\r\n        })\r\n        layer.batchDraw()\r\n      })\r\n    },\r\n    /**\r\n     * 监听--鼠标松开或屏幕触摸结束\r\n     * @param stage\r\n     * @param layer\r\n     * @param selectionRectangle\r\n     * @param tr\r\n     */\r\n    mouseupTouchend(stage, layer, selectionRectangle, tr) {\r\n      stage.on('mouseup touchend', () => {\r\n        if (!selectionRectangle.visible()) {\r\n          return\r\n        }\r\n        // update visibility in timeout, so we can check it in click event\r\n        setTimeout(() => {\r\n          selectionRectangle.visible(false)\r\n          layer.batchDraw()\r\n        })\r\n\r\n        // var shapes = stage.find('.rect').toArray()\r\n        const shapes = []\r\n        layer.children.forEach(item => {\r\n          if (item.getName().indexOf('star_') !== -1) shapes.push(item) // 选中所有星形\r\n        })\r\n        const box = selectionRectangle.getClientRect()\r\n        const selected = shapes.filter((shape) =>\r\n          Konva.Util.haveIntersection(box, shape.getClientRect())\r\n        )\r\n        tr.nodes(selected)\r\n        layer.batchDraw()\r\n      })\r\n    },\r\n    /**\r\n     * 监听--点击事件\r\n     * @param stage\r\n     * @param layer\r\n     * @param selectionRectangle\r\n     * @param tr\r\n     */\r\n    clickTap(stage, layer, selectionRectangle, tr) {\r\n      stage.on('click tap', (e) => {\r\n        // if we are selecting with rect, do nothing\r\n        // 如果我们用rect进行选择，什么都不做\r\n        if (selectionRectangle.visible()) {\r\n          return\r\n        }\r\n        // if click on empty area - remove all selections\r\n        // 如果单击空白区域-删除所有选择\r\n        if (e.target === stage) {\r\n          tr.nodes([])\r\n          layer.draw()\r\n          return\r\n        }\r\n        // do nothing if clicked NOT on our rectangles\r\n        // 如果点击不在矩形上，什么都不做\r\n        if (e.target.getName().indexOf('star_') === -1) {\r\n          return\r\n        }\r\n        // do we pressed shift or ctrl?\r\n        // 我们是按shift还是ctrl键?\r\n        const metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey\r\n        const isSelected = tr.nodes().indexOf(e.target) >= 0\r\n\r\n        if (!metaPressed && !isSelected) {\r\n          // if no key pressed and the node is not selected\r\n          // 如果没有按下键，节点没有被选中\r\n          // select just one\r\n          // 选择只有一个\r\n          tr.nodes([e.target])\r\n        } else if (metaPressed && isSelected) {\r\n          // if we pressed keys and node was selected\r\n          // 如果我们按下键，节点被选中\r\n          // we need to remove it from selection:\r\n          // 我们需要从选择中删除\r\n          const nodes = tr.nodes().slice() // use slice to have new copy of array 使用切片有数组的新拷贝\r\n          // remove node from array\r\n          // 从数组中删除节点\r\n          nodes.splice(nodes.indexOf(e.target), 1)\r\n          tr.nodes(nodes)\r\n        } else if (metaPressed && !isSelected) {\r\n          // add the node into selection\r\n          // 将节点添加到选择中\r\n          const nodes = tr.nodes().concat([e.target])\r\n          tr.nodes(nodes)\r\n        }\r\n        layer.draw()\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Select-and-Transform.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Select-and-Transform.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Select-and-Transform.vue?vue&type=template&id=1d9a470a&\"\nimport script from \"./Select-and-Transform.vue?vue&type=script&lang=js&\"\nexport * from \"./Select-and-Transform.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}